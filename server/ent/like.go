// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sentrionic/horizon/ent/like"
	"github.com/sentrionic/horizon/ent/song"
	"github.com/sentrionic/horizon/ent/user"
)

// Like is the model entity for the Like schema.
type Like struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// SongID holds the value of the "song_id" field.
	SongID uuid.UUID `json:"song_id,omitempty"`
	// DateAdded holds the value of the "date_added" field.
	DateAdded time.Time `json:"date_added,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikeQuery when eager-loading is set.
	Edges LikeEdges `json:"edges"`
}

// LikeEdges holds the relations/edges for other nodes in the graph.
type LikeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Song holds the value of the song edge.
	Song *Song `json:"song,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SongOrErr returns the Song value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeEdges) SongOrErr() (*Song, error) {
	if e.loadedTypes[1] {
		if e.Song == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: song.Label}
		}
		return e.Song, nil
	}
	return nil, &NotLoadedError{edge: "song"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Like) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case like.FieldID:
			values[i] = new(sql.NullInt64)
		case like.FieldDateAdded:
			values[i] = new(sql.NullTime)
		case like.FieldUserID, like.FieldSongID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Like", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Like fields.
func (l *Like) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case like.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case like.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				l.UserID = *value
			}
		case like.FieldSongID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field song_id", values[i])
			} else if value != nil {
				l.SongID = *value
			}
		case like.FieldDateAdded:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_added", values[i])
			} else if value.Valid {
				l.DateAdded = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Like entity.
func (l *Like) QueryUser() *UserQuery {
	return (&LikeClient{config: l.config}).QueryUser(l)
}

// QuerySong queries the "song" edge of the Like entity.
func (l *Like) QuerySong() *SongQuery {
	return (&LikeClient{config: l.config}).QuerySong(l)
}

// Update returns a builder for updating this Like.
// Note that you need to call Like.Unwrap() before calling this method if this Like
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Like) Update() *LikeUpdateOne {
	return (&LikeClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Like entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Like) Unwrap() *Like {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Like is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Like) String() string {
	var builder strings.Builder
	builder.WriteString("Like(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", l.UserID))
	builder.WriteString(", ")
	builder.WriteString("song_id=")
	builder.WriteString(fmt.Sprintf("%v", l.SongID))
	builder.WriteString(", ")
	builder.WriteString("date_added=")
	builder.WriteString(l.DateAdded.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Likes is a parsable slice of Like.
type Likes []*Like

func (l Likes) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
