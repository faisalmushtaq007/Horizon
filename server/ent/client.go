// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/sentrionic/horizon/ent/migrate"

	"github.com/sentrionic/horizon/ent/like"
	"github.com/sentrionic/horizon/ent/playlist"
	"github.com/sentrionic/horizon/ent/playlistsong"
	"github.com/sentrionic/horizon/ent/song"
	"github.com/sentrionic/horizon/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Like is the client for interacting with the Like builders.
	Like *LikeClient
	// Playlist is the client for interacting with the Playlist builders.
	Playlist *PlaylistClient
	// PlaylistSong is the client for interacting with the PlaylistSong builders.
	PlaylistSong *PlaylistSongClient
	// Song is the client for interacting with the Song builders.
	Song *SongClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Like = NewLikeClient(c.config)
	c.Playlist = NewPlaylistClient(c.config)
	c.PlaylistSong = NewPlaylistSongClient(c.config)
	c.Song = NewSongClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Like:         NewLikeClient(cfg),
		Playlist:     NewPlaylistClient(cfg),
		PlaylistSong: NewPlaylistSongClient(cfg),
		Song:         NewSongClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Like:         NewLikeClient(cfg),
		Playlist:     NewPlaylistClient(cfg),
		PlaylistSong: NewPlaylistSongClient(cfg),
		Song:         NewSongClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Like.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Like.Use(hooks...)
	c.Playlist.Use(hooks...)
	c.PlaylistSong.Use(hooks...)
	c.Song.Use(hooks...)
	c.User.Use(hooks...)
}

// LikeClient is a client for the Like schema.
type LikeClient struct {
	config
}

// NewLikeClient returns a client for the Like from the given config.
func NewLikeClient(c config) *LikeClient {
	return &LikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `like.Hooks(f(g(h())))`.
func (c *LikeClient) Use(hooks ...Hook) {
	c.hooks.Like = append(c.hooks.Like, hooks...)
}

// Create returns a builder for creating a Like entity.
func (c *LikeClient) Create() *LikeCreate {
	mutation := newLikeMutation(c.config, OpCreate)
	return &LikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Like entities.
func (c *LikeClient) CreateBulk(builders ...*LikeCreate) *LikeCreateBulk {
	return &LikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Like.
func (c *LikeClient) Update() *LikeUpdate {
	mutation := newLikeMutation(c.config, OpUpdate)
	return &LikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LikeClient) UpdateOne(l *Like) *LikeUpdateOne {
	mutation := newLikeMutation(c.config, OpUpdateOne, withLike(l))
	return &LikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LikeClient) UpdateOneID(id int) *LikeUpdateOne {
	mutation := newLikeMutation(c.config, OpUpdateOne, withLikeID(id))
	return &LikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Like.
func (c *LikeClient) Delete() *LikeDelete {
	mutation := newLikeMutation(c.config, OpDelete)
	return &LikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LikeClient) DeleteOne(l *Like) *LikeDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *LikeClient) DeleteOneID(id int) *LikeDeleteOne {
	builder := c.Delete().Where(like.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LikeDeleteOne{builder}
}

// Query returns a query builder for Like.
func (c *LikeClient) Query() *LikeQuery {
	return &LikeQuery{
		config: c.config,
	}
}

// Get returns a Like entity by its id.
func (c *LikeClient) Get(ctx context.Context, id int) (*Like, error) {
	return c.Query().Where(like.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LikeClient) GetX(ctx context.Context, id int) *Like {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Like.
func (c *LikeClient) QueryUser(l *Like) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(like.Table, like.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, like.UserTable, like.UserColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySong queries the song edge of a Like.
func (c *LikeClient) QuerySong(l *Like) *SongQuery {
	query := &SongQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(like.Table, like.FieldID, id),
			sqlgraph.To(song.Table, song.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, like.SongTable, like.SongColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LikeClient) Hooks() []Hook {
	return c.hooks.Like
}

// PlaylistClient is a client for the Playlist schema.
type PlaylistClient struct {
	config
}

// NewPlaylistClient returns a client for the Playlist from the given config.
func NewPlaylistClient(c config) *PlaylistClient {
	return &PlaylistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playlist.Hooks(f(g(h())))`.
func (c *PlaylistClient) Use(hooks ...Hook) {
	c.hooks.Playlist = append(c.hooks.Playlist, hooks...)
}

// Create returns a builder for creating a Playlist entity.
func (c *PlaylistClient) Create() *PlaylistCreate {
	mutation := newPlaylistMutation(c.config, OpCreate)
	return &PlaylistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Playlist entities.
func (c *PlaylistClient) CreateBulk(builders ...*PlaylistCreate) *PlaylistCreateBulk {
	return &PlaylistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Playlist.
func (c *PlaylistClient) Update() *PlaylistUpdate {
	mutation := newPlaylistMutation(c.config, OpUpdate)
	return &PlaylistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaylistClient) UpdateOne(pl *Playlist) *PlaylistUpdateOne {
	mutation := newPlaylistMutation(c.config, OpUpdateOne, withPlaylist(pl))
	return &PlaylistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaylistClient) UpdateOneID(id uuid.UUID) *PlaylistUpdateOne {
	mutation := newPlaylistMutation(c.config, OpUpdateOne, withPlaylistID(id))
	return &PlaylistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Playlist.
func (c *PlaylistClient) Delete() *PlaylistDelete {
	mutation := newPlaylistMutation(c.config, OpDelete)
	return &PlaylistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaylistClient) DeleteOne(pl *Playlist) *PlaylistDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PlaylistClient) DeleteOneID(id uuid.UUID) *PlaylistDeleteOne {
	builder := c.Delete().Where(playlist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaylistDeleteOne{builder}
}

// Query returns a query builder for Playlist.
func (c *PlaylistClient) Query() *PlaylistQuery {
	return &PlaylistQuery{
		config: c.config,
	}
}

// Get returns a Playlist entity by its id.
func (c *PlaylistClient) Get(ctx context.Context, id uuid.UUID) (*Playlist, error) {
	return c.Query().Where(playlist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaylistClient) GetX(ctx context.Context, id uuid.UUID) *Playlist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Playlist.
func (c *PlaylistClient) QueryUser(pl *Playlist) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist.Table, playlist.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlist.UserTable, playlist.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySongs queries the songs edge of a Playlist.
func (c *PlaylistClient) QuerySongs(pl *Playlist) *PlaylistSongQuery {
	query := &PlaylistSongQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist.Table, playlist.FieldID, id),
			sqlgraph.To(playlistsong.Table, playlistsong.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playlist.SongsTable, playlist.SongsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaylistClient) Hooks() []Hook {
	return c.hooks.Playlist
}

// PlaylistSongClient is a client for the PlaylistSong schema.
type PlaylistSongClient struct {
	config
}

// NewPlaylistSongClient returns a client for the PlaylistSong from the given config.
func NewPlaylistSongClient(c config) *PlaylistSongClient {
	return &PlaylistSongClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playlistsong.Hooks(f(g(h())))`.
func (c *PlaylistSongClient) Use(hooks ...Hook) {
	c.hooks.PlaylistSong = append(c.hooks.PlaylistSong, hooks...)
}

// Create returns a builder for creating a PlaylistSong entity.
func (c *PlaylistSongClient) Create() *PlaylistSongCreate {
	mutation := newPlaylistSongMutation(c.config, OpCreate)
	return &PlaylistSongCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlaylistSong entities.
func (c *PlaylistSongClient) CreateBulk(builders ...*PlaylistSongCreate) *PlaylistSongCreateBulk {
	return &PlaylistSongCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlaylistSong.
func (c *PlaylistSongClient) Update() *PlaylistSongUpdate {
	mutation := newPlaylistSongMutation(c.config, OpUpdate)
	return &PlaylistSongUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaylistSongClient) UpdateOne(ps *PlaylistSong) *PlaylistSongUpdateOne {
	mutation := newPlaylistSongMutation(c.config, OpUpdateOne, withPlaylistSong(ps))
	return &PlaylistSongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaylistSongClient) UpdateOneID(id int) *PlaylistSongUpdateOne {
	mutation := newPlaylistSongMutation(c.config, OpUpdateOne, withPlaylistSongID(id))
	return &PlaylistSongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlaylistSong.
func (c *PlaylistSongClient) Delete() *PlaylistSongDelete {
	mutation := newPlaylistSongMutation(c.config, OpDelete)
	return &PlaylistSongDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaylistSongClient) DeleteOne(ps *PlaylistSong) *PlaylistSongDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PlaylistSongClient) DeleteOneID(id int) *PlaylistSongDeleteOne {
	builder := c.Delete().Where(playlistsong.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaylistSongDeleteOne{builder}
}

// Query returns a query builder for PlaylistSong.
func (c *PlaylistSongClient) Query() *PlaylistSongQuery {
	return &PlaylistSongQuery{
		config: c.config,
	}
}

// Get returns a PlaylistSong entity by its id.
func (c *PlaylistSongClient) Get(ctx context.Context, id int) (*PlaylistSong, error) {
	return c.Query().Where(playlistsong.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaylistSongClient) GetX(ctx context.Context, id int) *PlaylistSong {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaylist queries the playlist edge of a PlaylistSong.
func (c *PlaylistSongClient) QueryPlaylist(ps *PlaylistSong) *PlaylistQuery {
	query := &PlaylistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlistsong.Table, playlistsong.FieldID, id),
			sqlgraph.To(playlist.Table, playlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlistsong.PlaylistTable, playlistsong.PlaylistColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySong queries the song edge of a PlaylistSong.
func (c *PlaylistSongClient) QuerySong(ps *PlaylistSong) *SongQuery {
	query := &SongQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlistsong.Table, playlistsong.FieldID, id),
			sqlgraph.To(song.Table, song.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlistsong.SongTable, playlistsong.SongColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaylistSongClient) Hooks() []Hook {
	return c.hooks.PlaylistSong
}

// SongClient is a client for the Song schema.
type SongClient struct {
	config
}

// NewSongClient returns a client for the Song from the given config.
func NewSongClient(c config) *SongClient {
	return &SongClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `song.Hooks(f(g(h())))`.
func (c *SongClient) Use(hooks ...Hook) {
	c.hooks.Song = append(c.hooks.Song, hooks...)
}

// Create returns a builder for creating a Song entity.
func (c *SongClient) Create() *SongCreate {
	mutation := newSongMutation(c.config, OpCreate)
	return &SongCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Song entities.
func (c *SongClient) CreateBulk(builders ...*SongCreate) *SongCreateBulk {
	return &SongCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Song.
func (c *SongClient) Update() *SongUpdate {
	mutation := newSongMutation(c.config, OpUpdate)
	return &SongUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SongClient) UpdateOne(s *Song) *SongUpdateOne {
	mutation := newSongMutation(c.config, OpUpdateOne, withSong(s))
	return &SongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SongClient) UpdateOneID(id uuid.UUID) *SongUpdateOne {
	mutation := newSongMutation(c.config, OpUpdateOne, withSongID(id))
	return &SongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Song.
func (c *SongClient) Delete() *SongDelete {
	mutation := newSongMutation(c.config, OpDelete)
	return &SongDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SongClient) DeleteOne(s *Song) *SongDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SongClient) DeleteOneID(id uuid.UUID) *SongDeleteOne {
	builder := c.Delete().Where(song.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SongDeleteOne{builder}
}

// Query returns a query builder for Song.
func (c *SongClient) Query() *SongQuery {
	return &SongQuery{
		config: c.config,
	}
}

// Get returns a Song entity by its id.
func (c *SongClient) Get(ctx context.Context, id uuid.UUID) (*Song, error) {
	return c.Query().Where(song.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SongClient) GetX(ctx context.Context, id uuid.UUID) *Song {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Song.
func (c *SongClient) QueryUser(s *Song) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(song.Table, song.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, song.UserTable, song.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLikedBy queries the liked_by edge of a Song.
func (c *SongClient) QueryLikedBy(s *Song) *LikeQuery {
	query := &LikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(song.Table, song.FieldID, id),
			sqlgraph.To(like.Table, like.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, song.LikedByTable, song.LikedByColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlaylists queries the playlists edge of a Song.
func (c *SongClient) QueryPlaylists(s *Song) *PlaylistSongQuery {
	query := &PlaylistSongQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(song.Table, song.FieldID, id),
			sqlgraph.To(playlistsong.Table, playlistsong.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, song.PlaylistsTable, song.PlaylistsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SongClient) Hooks() []Hook {
	return c.hooks.Song
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySongs queries the songs edge of a User.
func (c *UserClient) QuerySongs(u *User) *SongQuery {
	query := &SongQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(song.Table, song.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SongsTable, user.SongsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlaylists queries the playlists edge of a User.
func (c *UserClient) QueryPlaylists(u *User) *PlaylistQuery {
	query := &PlaylistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playlist.Table, playlist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PlaylistsTable, user.PlaylistsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLikes queries the likes edge of a User.
func (c *UserClient) QueryLikes(u *User) *LikeQuery {
	query := &LikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(like.Table, like.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LikesTable, user.LikesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}
