// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sentrionic/horizon/ent/playlist"
	"github.com/sentrionic/horizon/ent/playlistsong"
	"github.com/sentrionic/horizon/ent/song"
)

// PlaylistSong is the model entity for the PlaylistSong schema.
type PlaylistSong struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PlaylistID holds the value of the "playlist_id" field.
	PlaylistID uuid.UUID `json:"playlist_id,omitempty"`
	// SongID holds the value of the "song_id" field.
	SongID uuid.UUID `json:"song_id,omitempty"`
	// DateAdded holds the value of the "date_added" field.
	DateAdded time.Time `json:"date_added,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistSongQuery when eager-loading is set.
	Edges PlaylistSongEdges `json:"edges"`
}

// PlaylistSongEdges holds the relations/edges for other nodes in the graph.
type PlaylistSongEdges struct {
	// Playlist holds the value of the playlist edge.
	Playlist *Playlist `json:"playlist,omitempty"`
	// Song holds the value of the song edge.
	Song *Song `json:"song,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlaylistOrErr returns the Playlist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistSongEdges) PlaylistOrErr() (*Playlist, error) {
	if e.loadedTypes[0] {
		if e.Playlist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playlist.Label}
		}
		return e.Playlist, nil
	}
	return nil, &NotLoadedError{edge: "playlist"}
}

// SongOrErr returns the Song value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistSongEdges) SongOrErr() (*Song, error) {
	if e.loadedTypes[1] {
		if e.Song == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: song.Label}
		}
		return e.Song, nil
	}
	return nil, &NotLoadedError{edge: "song"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaylistSong) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playlistsong.FieldID:
			values[i] = new(sql.NullInt64)
		case playlistsong.FieldDateAdded:
			values[i] = new(sql.NullTime)
		case playlistsong.FieldPlaylistID, playlistsong.FieldSongID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PlaylistSong", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaylistSong fields.
func (ps *PlaylistSong) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playlistsong.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case playlistsong.FieldPlaylistID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field playlist_id", values[i])
			} else if value != nil {
				ps.PlaylistID = *value
			}
		case playlistsong.FieldSongID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field song_id", values[i])
			} else if value != nil {
				ps.SongID = *value
			}
		case playlistsong.FieldDateAdded:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_added", values[i])
			} else if value.Valid {
				ps.DateAdded = value.Time
			}
		}
	}
	return nil
}

// QueryPlaylist queries the "playlist" edge of the PlaylistSong entity.
func (ps *PlaylistSong) QueryPlaylist() *PlaylistQuery {
	return (&PlaylistSongClient{config: ps.config}).QueryPlaylist(ps)
}

// QuerySong queries the "song" edge of the PlaylistSong entity.
func (ps *PlaylistSong) QuerySong() *SongQuery {
	return (&PlaylistSongClient{config: ps.config}).QuerySong(ps)
}

// Update returns a builder for updating this PlaylistSong.
// Note that you need to call PlaylistSong.Unwrap() before calling this method if this PlaylistSong
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PlaylistSong) Update() *PlaylistSongUpdateOne {
	return (&PlaylistSongClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the PlaylistSong entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PlaylistSong) Unwrap() *PlaylistSong {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaylistSong is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PlaylistSong) String() string {
	var builder strings.Builder
	builder.WriteString("PlaylistSong(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("playlist_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.PlaylistID))
	builder.WriteString(", ")
	builder.WriteString("song_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.SongID))
	builder.WriteString(", ")
	builder.WriteString("date_added=")
	builder.WriteString(ps.DateAdded.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlaylistSongs is a parsable slice of PlaylistSong.
type PlaylistSongs []*PlaylistSong

func (ps PlaylistSongs) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
