// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sentrionic/horizon/ent/like"
	"github.com/sentrionic/horizon/ent/playlistsong"
	"github.com/sentrionic/horizon/ent/predicate"
	"github.com/sentrionic/horizon/ent/song"
	"github.com/sentrionic/horizon/ent/user"
)

// SongUpdate is the builder for updating Song entities.
type SongUpdate struct {
	config
	hooks    []Hook
	mutation *SongMutation
}

// Where appends a list predicates to the SongUpdate builder.
func (su *SongUpdate) Where(ps ...predicate.Song) *SongUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SongUpdate) SetUpdatedAt(t time.Time) *SongUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetArtistID sets the "artist_id" field.
func (su *SongUpdate) SetArtistID(u uuid.UUID) *SongUpdate {
	su.mutation.SetArtistID(u)
	return su
}

// SetTitle sets the "title" field.
func (su *SongUpdate) SetTitle(s string) *SongUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetURL sets the "url" field.
func (su *SongUpdate) SetURL(s string) *SongUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetPlays sets the "plays" field.
func (su *SongUpdate) SetPlays(u uint32) *SongUpdate {
	su.mutation.ResetPlays()
	su.mutation.SetPlays(u)
	return su
}

// SetNillablePlays sets the "plays" field if the given value is not nil.
func (su *SongUpdate) SetNillablePlays(u *uint32) *SongUpdate {
	if u != nil {
		su.SetPlays(*u)
	}
	return su
}

// AddPlays adds u to the "plays" field.
func (su *SongUpdate) AddPlays(u int32) *SongUpdate {
	su.mutation.AddPlays(u)
	return su
}

// SetDuration sets the "duration" field.
func (su *SongUpdate) SetDuration(u uint32) *SongUpdate {
	su.mutation.ResetDuration()
	su.mutation.SetDuration(u)
	return su
}

// AddDuration adds u to the "duration" field.
func (su *SongUpdate) AddDuration(u int32) *SongUpdate {
	su.mutation.AddDuration(u)
	return su
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *SongUpdate) SetUserID(id uuid.UUID) *SongUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *SongUpdate) SetUser(u *User) *SongUpdate {
	return su.SetUserID(u.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the Like entity by IDs.
func (su *SongUpdate) AddLikedByIDs(ids ...int) *SongUpdate {
	su.mutation.AddLikedByIDs(ids...)
	return su
}

// AddLikedBy adds the "liked_by" edges to the Like entity.
func (su *SongUpdate) AddLikedBy(l ...*Like) *SongUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return su.AddLikedByIDs(ids...)
}

// AddPlaylistIDs adds the "playlists" edge to the PlaylistSong entity by IDs.
func (su *SongUpdate) AddPlaylistIDs(ids ...int) *SongUpdate {
	su.mutation.AddPlaylistIDs(ids...)
	return su
}

// AddPlaylists adds the "playlists" edges to the PlaylistSong entity.
func (su *SongUpdate) AddPlaylists(p ...*PlaylistSong) *SongUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPlaylistIDs(ids...)
}

// Mutation returns the SongMutation object of the builder.
func (su *SongUpdate) Mutation() *SongMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *SongUpdate) ClearUser() *SongUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearLikedBy clears all "liked_by" edges to the Like entity.
func (su *SongUpdate) ClearLikedBy() *SongUpdate {
	su.mutation.ClearLikedBy()
	return su
}

// RemoveLikedByIDs removes the "liked_by" edge to Like entities by IDs.
func (su *SongUpdate) RemoveLikedByIDs(ids ...int) *SongUpdate {
	su.mutation.RemoveLikedByIDs(ids...)
	return su
}

// RemoveLikedBy removes "liked_by" edges to Like entities.
func (su *SongUpdate) RemoveLikedBy(l ...*Like) *SongUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return su.RemoveLikedByIDs(ids...)
}

// ClearPlaylists clears all "playlists" edges to the PlaylistSong entity.
func (su *SongUpdate) ClearPlaylists() *SongUpdate {
	su.mutation.ClearPlaylists()
	return su
}

// RemovePlaylistIDs removes the "playlists" edge to PlaylistSong entities by IDs.
func (su *SongUpdate) RemovePlaylistIDs(ids ...int) *SongUpdate {
	su.mutation.RemovePlaylistIDs(ids...)
	return su
}

// RemovePlaylists removes "playlists" edges to PlaylistSong entities.
func (su *SongUpdate) RemovePlaylists(p ...*PlaylistSong) *SongUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePlaylistIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SongUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SongMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SongUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SongUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SongUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SongUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := song.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SongUpdate) check() error {
	if v, ok := su.mutation.Title(); ok {
		if err := song.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Song.title": %w`, err)}
		}
	}
	if v, ok := su.mutation.URL(); ok {
		if err := song.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Song.url": %w`, err)}
		}
	}
	if _, ok := su.mutation.UserID(); su.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Song.user"`)
	}
	return nil
}

func (su *SongUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   song.Table,
			Columns: song.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: song.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: song.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldTitle,
		})
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldURL,
		})
	}
	if value, ok := su.mutation.Plays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldPlays,
		})
	}
	if value, ok := su.mutation.AddedPlays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldPlays,
		})
	}
	if value, ok := su.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if value, ok := su.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   song.UserTable,
			Columns: []string{song.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   song.UserTable,
			Columns: []string{song.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.LikedByTable,
			Columns: []string{song.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: like.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedLikedByIDs(); len(nodes) > 0 && !su.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.LikedByTable,
			Columns: []string{song.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: like.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.LikedByTable,
			Columns: []string{song.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: like.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.PlaylistsTable,
			Columns: []string{song.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlistsong.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !su.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.PlaylistsTable,
			Columns: []string{song.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlistsong.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.PlaylistsTable,
			Columns: []string{song.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlistsong.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{song.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SongUpdateOne is the builder for updating a single Song entity.
type SongUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SongMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SongUpdateOne) SetUpdatedAt(t time.Time) *SongUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetArtistID sets the "artist_id" field.
func (suo *SongUpdateOne) SetArtistID(u uuid.UUID) *SongUpdateOne {
	suo.mutation.SetArtistID(u)
	return suo
}

// SetTitle sets the "title" field.
func (suo *SongUpdateOne) SetTitle(s string) *SongUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetURL sets the "url" field.
func (suo *SongUpdateOne) SetURL(s string) *SongUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetPlays sets the "plays" field.
func (suo *SongUpdateOne) SetPlays(u uint32) *SongUpdateOne {
	suo.mutation.ResetPlays()
	suo.mutation.SetPlays(u)
	return suo
}

// SetNillablePlays sets the "plays" field if the given value is not nil.
func (suo *SongUpdateOne) SetNillablePlays(u *uint32) *SongUpdateOne {
	if u != nil {
		suo.SetPlays(*u)
	}
	return suo
}

// AddPlays adds u to the "plays" field.
func (suo *SongUpdateOne) AddPlays(u int32) *SongUpdateOne {
	suo.mutation.AddPlays(u)
	return suo
}

// SetDuration sets the "duration" field.
func (suo *SongUpdateOne) SetDuration(u uint32) *SongUpdateOne {
	suo.mutation.ResetDuration()
	suo.mutation.SetDuration(u)
	return suo
}

// AddDuration adds u to the "duration" field.
func (suo *SongUpdateOne) AddDuration(u int32) *SongUpdateOne {
	suo.mutation.AddDuration(u)
	return suo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *SongUpdateOne) SetUserID(id uuid.UUID) *SongUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *SongUpdateOne) SetUser(u *User) *SongUpdateOne {
	return suo.SetUserID(u.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the Like entity by IDs.
func (suo *SongUpdateOne) AddLikedByIDs(ids ...int) *SongUpdateOne {
	suo.mutation.AddLikedByIDs(ids...)
	return suo
}

// AddLikedBy adds the "liked_by" edges to the Like entity.
func (suo *SongUpdateOne) AddLikedBy(l ...*Like) *SongUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suo.AddLikedByIDs(ids...)
}

// AddPlaylistIDs adds the "playlists" edge to the PlaylistSong entity by IDs.
func (suo *SongUpdateOne) AddPlaylistIDs(ids ...int) *SongUpdateOne {
	suo.mutation.AddPlaylistIDs(ids...)
	return suo
}

// AddPlaylists adds the "playlists" edges to the PlaylistSong entity.
func (suo *SongUpdateOne) AddPlaylists(p ...*PlaylistSong) *SongUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPlaylistIDs(ids...)
}

// Mutation returns the SongMutation object of the builder.
func (suo *SongUpdateOne) Mutation() *SongMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *SongUpdateOne) ClearUser() *SongUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearLikedBy clears all "liked_by" edges to the Like entity.
func (suo *SongUpdateOne) ClearLikedBy() *SongUpdateOne {
	suo.mutation.ClearLikedBy()
	return suo
}

// RemoveLikedByIDs removes the "liked_by" edge to Like entities by IDs.
func (suo *SongUpdateOne) RemoveLikedByIDs(ids ...int) *SongUpdateOne {
	suo.mutation.RemoveLikedByIDs(ids...)
	return suo
}

// RemoveLikedBy removes "liked_by" edges to Like entities.
func (suo *SongUpdateOne) RemoveLikedBy(l ...*Like) *SongUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suo.RemoveLikedByIDs(ids...)
}

// ClearPlaylists clears all "playlists" edges to the PlaylistSong entity.
func (suo *SongUpdateOne) ClearPlaylists() *SongUpdateOne {
	suo.mutation.ClearPlaylists()
	return suo
}

// RemovePlaylistIDs removes the "playlists" edge to PlaylistSong entities by IDs.
func (suo *SongUpdateOne) RemovePlaylistIDs(ids ...int) *SongUpdateOne {
	suo.mutation.RemovePlaylistIDs(ids...)
	return suo
}

// RemovePlaylists removes "playlists" edges to PlaylistSong entities.
func (suo *SongUpdateOne) RemovePlaylists(p ...*PlaylistSong) *SongUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePlaylistIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SongUpdateOne) Select(field string, fields ...string) *SongUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Song entity.
func (suo *SongUpdateOne) Save(ctx context.Context) (*Song, error) {
	var (
		err  error
		node *Song
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SongMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SongUpdateOne) SaveX(ctx context.Context) *Song {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SongUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SongUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SongUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := song.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SongUpdateOne) check() error {
	if v, ok := suo.mutation.Title(); ok {
		if err := song.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Song.title": %w`, err)}
		}
	}
	if v, ok := suo.mutation.URL(); ok {
		if err := song.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Song.url": %w`, err)}
		}
	}
	if _, ok := suo.mutation.UserID(); suo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Song.user"`)
	}
	return nil
}

func (suo *SongUpdateOne) sqlSave(ctx context.Context) (_node *Song, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   song.Table,
			Columns: song.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: song.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Song.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, song.FieldID)
		for _, f := range fields {
			if !song.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != song.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: song.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldTitle,
		})
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldURL,
		})
	}
	if value, ok := suo.mutation.Plays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldPlays,
		})
	}
	if value, ok := suo.mutation.AddedPlays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldPlays,
		})
	}
	if value, ok := suo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if value, ok := suo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   song.UserTable,
			Columns: []string{song.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   song.UserTable,
			Columns: []string{song.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.LikedByTable,
			Columns: []string{song.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: like.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedLikedByIDs(); len(nodes) > 0 && !suo.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.LikedByTable,
			Columns: []string{song.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: like.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.LikedByTable,
			Columns: []string{song.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: like.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.PlaylistsTable,
			Columns: []string{song.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlistsong.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !suo.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.PlaylistsTable,
			Columns: []string{song.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlistsong.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.PlaylistsTable,
			Columns: []string{song.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlistsong.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Song{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{song.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
