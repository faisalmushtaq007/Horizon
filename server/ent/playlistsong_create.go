// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sentrionic/horizon/ent/playlist"
	"github.com/sentrionic/horizon/ent/playlistsong"
	"github.com/sentrionic/horizon/ent/song"
)

// PlaylistSongCreate is the builder for creating a PlaylistSong entity.
type PlaylistSongCreate struct {
	config
	mutation *PlaylistSongMutation
	hooks    []Hook
}

// SetPlaylistID sets the "playlist_id" field.
func (psc *PlaylistSongCreate) SetPlaylistID(u uuid.UUID) *PlaylistSongCreate {
	psc.mutation.SetPlaylistID(u)
	return psc
}

// SetSongID sets the "song_id" field.
func (psc *PlaylistSongCreate) SetSongID(u uuid.UUID) *PlaylistSongCreate {
	psc.mutation.SetSongID(u)
	return psc
}

// SetDateAdded sets the "date_added" field.
func (psc *PlaylistSongCreate) SetDateAdded(t time.Time) *PlaylistSongCreate {
	psc.mutation.SetDateAdded(t)
	return psc
}

// SetNillableDateAdded sets the "date_added" field if the given value is not nil.
func (psc *PlaylistSongCreate) SetNillableDateAdded(t *time.Time) *PlaylistSongCreate {
	if t != nil {
		psc.SetDateAdded(*t)
	}
	return psc
}

// SetPlaylist sets the "playlist" edge to the Playlist entity.
func (psc *PlaylistSongCreate) SetPlaylist(p *Playlist) *PlaylistSongCreate {
	return psc.SetPlaylistID(p.ID)
}

// SetSong sets the "song" edge to the Song entity.
func (psc *PlaylistSongCreate) SetSong(s *Song) *PlaylistSongCreate {
	return psc.SetSongID(s.ID)
}

// Mutation returns the PlaylistSongMutation object of the builder.
func (psc *PlaylistSongCreate) Mutation() *PlaylistSongMutation {
	return psc.mutation
}

// Save creates the PlaylistSong in the database.
func (psc *PlaylistSongCreate) Save(ctx context.Context) (*PlaylistSong, error) {
	var (
		err  error
		node *PlaylistSong
	)
	psc.defaults()
	if len(psc.hooks) == 0 {
		if err = psc.check(); err != nil {
			return nil, err
		}
		node, err = psc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaylistSongMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psc.check(); err != nil {
				return nil, err
			}
			psc.mutation = mutation
			if node, err = psc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(psc.hooks) - 1; i >= 0; i-- {
			if psc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, psc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PlaylistSong)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlaylistSongMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PlaylistSongCreate) SaveX(ctx context.Context) *PlaylistSong {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PlaylistSongCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PlaylistSongCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PlaylistSongCreate) defaults() {
	if _, ok := psc.mutation.DateAdded(); !ok {
		v := playlistsong.DefaultDateAdded()
		psc.mutation.SetDateAdded(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PlaylistSongCreate) check() error {
	if _, ok := psc.mutation.PlaylistID(); !ok {
		return &ValidationError{Name: "playlist_id", err: errors.New(`ent: missing required field "PlaylistSong.playlist_id"`)}
	}
	if _, ok := psc.mutation.SongID(); !ok {
		return &ValidationError{Name: "song_id", err: errors.New(`ent: missing required field "PlaylistSong.song_id"`)}
	}
	if _, ok := psc.mutation.DateAdded(); !ok {
		return &ValidationError{Name: "date_added", err: errors.New(`ent: missing required field "PlaylistSong.date_added"`)}
	}
	if _, ok := psc.mutation.PlaylistID(); !ok {
		return &ValidationError{Name: "playlist", err: errors.New(`ent: missing required edge "PlaylistSong.playlist"`)}
	}
	if _, ok := psc.mutation.SongID(); !ok {
		return &ValidationError{Name: "song", err: errors.New(`ent: missing required edge "PlaylistSong.song"`)}
	}
	return nil
}

func (psc *PlaylistSongCreate) sqlSave(ctx context.Context) (*PlaylistSong, error) {
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (psc *PlaylistSongCreate) createSpec() (*PlaylistSong, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaylistSong{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: playlistsong.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: playlistsong.FieldID,
			},
		}
	)
	if value, ok := psc.mutation.DateAdded(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: playlistsong.FieldDateAdded,
		})
		_node.DateAdded = value
	}
	if nodes := psc.mutation.PlaylistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistsong.PlaylistTable,
			Columns: []string{playlistsong.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: playlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlaylistID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.SongIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistsong.SongTable,
			Columns: []string{playlistsong.SongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: song.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SongID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaylistSongCreateBulk is the builder for creating many PlaylistSong entities in bulk.
type PlaylistSongCreateBulk struct {
	config
	builders []*PlaylistSongCreate
}

// Save creates the PlaylistSong entities in the database.
func (pscb *PlaylistSongCreateBulk) Save(ctx context.Context) ([]*PlaylistSong, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PlaylistSong, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaylistSongMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PlaylistSongCreateBulk) SaveX(ctx context.Context) []*PlaylistSong {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PlaylistSongCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PlaylistSongCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
