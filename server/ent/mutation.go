// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/sentrionic/horizon"
	"github.com/sentrionic/horizon/ent/like"
	"github.com/sentrionic/horizon/ent/playlist"
	"github.com/sentrionic/horizon/ent/playlistsong"
	"github.com/sentrionic/horizon/ent/predicate"
	"github.com/sentrionic/horizon/ent/song"
	"github.com/sentrionic/horizon/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLike         = "Like"
	TypePlaylist     = "Playlist"
	TypePlaylistSong = "PlaylistSong"
	TypeSong         = "Song"
	TypeUser         = "User"
)

// LikeMutation represents an operation that mutates the Like nodes in the graph.
type LikeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date_added    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	song          *uuid.UUID
	clearedsong   bool
	done          bool
	oldValue      func(context.Context) (*Like, error)
	predicates    []predicate.Like
}

var _ ent.Mutation = (*LikeMutation)(nil)

// likeOption allows management of the mutation configuration using functional options.
type likeOption func(*LikeMutation)

// newLikeMutation creates new mutation for the Like entity.
func newLikeMutation(c config, op Op, opts ...likeOption) *LikeMutation {
	m := &LikeMutation{
		config:        c,
		op:            op,
		typ:           TypeLike,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLikeID sets the ID field of the mutation.
func withLikeID(id int) likeOption {
	return func(m *LikeMutation) {
		var (
			err   error
			once  sync.Once
			value *Like
		)
		m.oldValue = func(ctx context.Context) (*Like, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Like.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLike sets the old Like of the mutation.
func withLike(node *Like) likeOption {
	return func(m *LikeMutation) {
		m.oldValue = func(context.Context) (*Like, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LikeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LikeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Like.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *LikeMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LikeMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Like entity.
// If the Like object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LikeMutation) ResetUserID() {
	m.user = nil
}

// SetSongID sets the "song_id" field.
func (m *LikeMutation) SetSongID(u uuid.UUID) {
	m.song = &u
}

// SongID returns the value of the "song_id" field in the mutation.
func (m *LikeMutation) SongID() (r uuid.UUID, exists bool) {
	v := m.song
	if v == nil {
		return
	}
	return *v, true
}

// OldSongID returns the old "song_id" field's value of the Like entity.
// If the Like object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeMutation) OldSongID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSongID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSongID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSongID: %w", err)
	}
	return oldValue.SongID, nil
}

// ResetSongID resets all changes to the "song_id" field.
func (m *LikeMutation) ResetSongID() {
	m.song = nil
}

// SetDateAdded sets the "date_added" field.
func (m *LikeMutation) SetDateAdded(t time.Time) {
	m.date_added = &t
}

// DateAdded returns the value of the "date_added" field in the mutation.
func (m *LikeMutation) DateAdded() (r time.Time, exists bool) {
	v := m.date_added
	if v == nil {
		return
	}
	return *v, true
}

// OldDateAdded returns the old "date_added" field's value of the Like entity.
// If the Like object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeMutation) OldDateAdded(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateAdded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateAdded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateAdded: %w", err)
	}
	return oldValue.DateAdded, nil
}

// ResetDateAdded resets all changes to the "date_added" field.
func (m *LikeMutation) ResetDateAdded() {
	m.date_added = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *LikeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LikeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LikeMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LikeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearSong clears the "song" edge to the Song entity.
func (m *LikeMutation) ClearSong() {
	m.clearedsong = true
}

// SongCleared reports if the "song" edge to the Song entity was cleared.
func (m *LikeMutation) SongCleared() bool {
	return m.clearedsong
}

// SongIDs returns the "song" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SongID instead. It exists only for internal usage by the builders.
func (m *LikeMutation) SongIDs() (ids []uuid.UUID) {
	if id := m.song; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSong resets all changes to the "song" edge.
func (m *LikeMutation) ResetSong() {
	m.song = nil
	m.clearedsong = false
}

// Where appends a list predicates to the LikeMutation builder.
func (m *LikeMutation) Where(ps ...predicate.Like) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LikeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Like).
func (m *LikeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, like.FieldUserID)
	}
	if m.song != nil {
		fields = append(fields, like.FieldSongID)
	}
	if m.date_added != nil {
		fields = append(fields, like.FieldDateAdded)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case like.FieldUserID:
		return m.UserID()
	case like.FieldSongID:
		return m.SongID()
	case like.FieldDateAdded:
		return m.DateAdded()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case like.FieldUserID:
		return m.OldUserID(ctx)
	case like.FieldSongID:
		return m.OldSongID(ctx)
	case like.FieldDateAdded:
		return m.OldDateAdded(ctx)
	}
	return nil, fmt.Errorf("unknown Like field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case like.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case like.FieldSongID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSongID(v)
		return nil
	case like.FieldDateAdded:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateAdded(v)
		return nil
	}
	return fmt.Errorf("unknown Like field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Like numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Like nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikeMutation) ResetField(name string) error {
	switch name {
	case like.FieldUserID:
		m.ResetUserID()
		return nil
	case like.FieldSongID:
		m.ResetSongID()
		return nil
	case like.FieldDateAdded:
		m.ResetDateAdded()
		return nil
	}
	return fmt.Errorf("unknown Like field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, like.EdgeUser)
	}
	if m.song != nil {
		edges = append(edges, like.EdgeSong)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case like.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case like.EdgeSong:
		if id := m.song; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, like.EdgeUser)
	}
	if m.clearedsong {
		edges = append(edges, like.EdgeSong)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikeMutation) EdgeCleared(name string) bool {
	switch name {
	case like.EdgeUser:
		return m.cleareduser
	case like.EdgeSong:
		return m.clearedsong
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikeMutation) ClearEdge(name string) error {
	switch name {
	case like.EdgeUser:
		m.ClearUser()
		return nil
	case like.EdgeSong:
		m.ClearSong()
		return nil
	}
	return fmt.Errorf("unknown Like unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikeMutation) ResetEdge(name string) error {
	switch name {
	case like.EdgeUser:
		m.ResetUser()
		return nil
	case like.EdgeSong:
		m.ResetSong()
		return nil
	}
	return fmt.Errorf("unknown Like edge %s", name)
}

// PlaylistMutation represents an operation that mutates the Playlist nodes in the graph.
type PlaylistMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	description   *string
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	songs         map[int]struct{}
	removedsongs  map[int]struct{}
	clearedsongs  bool
	done          bool
	oldValue      func(context.Context) (*Playlist, error)
	predicates    []predicate.Playlist
}

var _ ent.Mutation = (*PlaylistMutation)(nil)

// playlistOption allows management of the mutation configuration using functional options.
type playlistOption func(*PlaylistMutation)

// newPlaylistMutation creates new mutation for the Playlist entity.
func newPlaylistMutation(c config, op Op, opts ...playlistOption) *PlaylistMutation {
	m := &PlaylistMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistID sets the ID field of the mutation.
func withPlaylistID(id uuid.UUID) playlistOption {
	return func(m *PlaylistMutation) {
		var (
			err   error
			once  sync.Once
			value *Playlist
		)
		m.oldValue = func(ctx context.Context) (*Playlist, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Playlist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylist sets the old Playlist of the mutation.
func withPlaylist(node *Playlist) playlistOption {
	return func(m *PlaylistMutation) {
		m.oldValue = func(context.Context) (*Playlist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Playlist entities.
func (m *PlaylistMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlaylistMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlaylistMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Playlist.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PlaylistMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PlaylistMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PlaylistMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PlaylistMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PlaylistMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PlaylistMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *PlaylistMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PlaylistMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PlaylistMutation) ResetUserID() {
	m.user = nil
}

// SetName sets the "name" field.
func (m *PlaylistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlaylistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlaylistMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PlaylistMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PlaylistMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PlaylistMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[playlist.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PlaylistMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[playlist.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PlaylistMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, playlist.FieldDescription)
}

// ClearUser clears the "user" edge to the User entity.
func (m *PlaylistMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PlaylistMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PlaylistMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PlaylistMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddSongIDs adds the "songs" edge to the PlaylistSong entity by ids.
func (m *PlaylistMutation) AddSongIDs(ids ...int) {
	if m.songs == nil {
		m.songs = make(map[int]struct{})
	}
	for i := range ids {
		m.songs[ids[i]] = struct{}{}
	}
}

// ClearSongs clears the "songs" edge to the PlaylistSong entity.
func (m *PlaylistMutation) ClearSongs() {
	m.clearedsongs = true
}

// SongsCleared reports if the "songs" edge to the PlaylistSong entity was cleared.
func (m *PlaylistMutation) SongsCleared() bool {
	return m.clearedsongs
}

// RemoveSongIDs removes the "songs" edge to the PlaylistSong entity by IDs.
func (m *PlaylistMutation) RemoveSongIDs(ids ...int) {
	if m.removedsongs == nil {
		m.removedsongs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.songs, ids[i])
		m.removedsongs[ids[i]] = struct{}{}
	}
}

// RemovedSongs returns the removed IDs of the "songs" edge to the PlaylistSong entity.
func (m *PlaylistMutation) RemovedSongsIDs() (ids []int) {
	for id := range m.removedsongs {
		ids = append(ids, id)
	}
	return
}

// SongsIDs returns the "songs" edge IDs in the mutation.
func (m *PlaylistMutation) SongsIDs() (ids []int) {
	for id := range m.songs {
		ids = append(ids, id)
	}
	return
}

// ResetSongs resets all changes to the "songs" edge.
func (m *PlaylistMutation) ResetSongs() {
	m.songs = nil
	m.clearedsongs = false
	m.removedsongs = nil
}

// Where appends a list predicates to the PlaylistMutation builder.
func (m *PlaylistMutation) Where(ps ...predicate.Playlist) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlaylistMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Playlist).
func (m *PlaylistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlaylistMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, playlist.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, playlist.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, playlist.FieldUserID)
	}
	if m.name != nil {
		fields = append(fields, playlist.FieldName)
	}
	if m.description != nil {
		fields = append(fields, playlist.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlaylistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlist.FieldCreatedAt:
		return m.CreatedAt()
	case playlist.FieldUpdatedAt:
		return m.UpdatedAt()
	case playlist.FieldUserID:
		return m.UserID()
	case playlist.FieldName:
		return m.Name()
	case playlist.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlaylistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlist.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case playlist.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case playlist.FieldUserID:
		return m.OldUserID(ctx)
	case playlist.FieldName:
		return m.OldName(ctx)
	case playlist.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Playlist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlist.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case playlist.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case playlist.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case playlist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case playlist.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlaylistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlaylistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Playlist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlaylistMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playlist.FieldDescription) {
		fields = append(fields, playlist.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlaylistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistMutation) ClearField(name string) error {
	switch name {
	case playlist.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Playlist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlaylistMutation) ResetField(name string) error {
	switch name {
	case playlist.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case playlist.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case playlist.FieldUserID:
		m.ResetUserID()
		return nil
	case playlist.FieldName:
		m.ResetName()
		return nil
	case playlist.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlaylistMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, playlist.EdgeUser)
	}
	if m.songs != nil {
		edges = append(edges, playlist.EdgeSongs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlaylistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case playlist.EdgeSongs:
		ids := make([]ent.Value, 0, len(m.songs))
		for id := range m.songs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlaylistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsongs != nil {
		edges = append(edges, playlist.EdgeSongs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlaylistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeSongs:
		ids := make([]ent.Value, 0, len(m.removedsongs))
		for id := range m.removedsongs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlaylistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, playlist.EdgeUser)
	}
	if m.clearedsongs {
		edges = append(edges, playlist.EdgeSongs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlaylistMutation) EdgeCleared(name string) bool {
	switch name {
	case playlist.EdgeUser:
		return m.cleareduser
	case playlist.EdgeSongs:
		return m.clearedsongs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlaylistMutation) ClearEdge(name string) error {
	switch name {
	case playlist.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Playlist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlaylistMutation) ResetEdge(name string) error {
	switch name {
	case playlist.EdgeUser:
		m.ResetUser()
		return nil
	case playlist.EdgeSongs:
		m.ResetSongs()
		return nil
	}
	return fmt.Errorf("unknown Playlist edge %s", name)
}

// PlaylistSongMutation represents an operation that mutates the PlaylistSong nodes in the graph.
type PlaylistSongMutation struct {
	config
	op              Op
	typ             string
	id              *int
	date_added      *time.Time
	clearedFields   map[string]struct{}
	playlist        *uuid.UUID
	clearedplaylist bool
	song            *uuid.UUID
	clearedsong     bool
	done            bool
	oldValue        func(context.Context) (*PlaylistSong, error)
	predicates      []predicate.PlaylistSong
}

var _ ent.Mutation = (*PlaylistSongMutation)(nil)

// playlistsongOption allows management of the mutation configuration using functional options.
type playlistsongOption func(*PlaylistSongMutation)

// newPlaylistSongMutation creates new mutation for the PlaylistSong entity.
func newPlaylistSongMutation(c config, op Op, opts ...playlistsongOption) *PlaylistSongMutation {
	m := &PlaylistSongMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylistSong,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistSongID sets the ID field of the mutation.
func withPlaylistSongID(id int) playlistsongOption {
	return func(m *PlaylistSongMutation) {
		var (
			err   error
			once  sync.Once
			value *PlaylistSong
		)
		m.oldValue = func(ctx context.Context) (*PlaylistSong, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlaylistSong.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylistSong sets the old PlaylistSong of the mutation.
func withPlaylistSong(node *PlaylistSong) playlistsongOption {
	return func(m *PlaylistSongMutation) {
		m.oldValue = func(context.Context) (*PlaylistSong, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistSongMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistSongMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlaylistSongMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlaylistSongMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlaylistSong.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPlaylistID sets the "playlist_id" field.
func (m *PlaylistSongMutation) SetPlaylistID(u uuid.UUID) {
	m.playlist = &u
}

// PlaylistID returns the value of the "playlist_id" field in the mutation.
func (m *PlaylistSongMutation) PlaylistID() (r uuid.UUID, exists bool) {
	v := m.playlist
	if v == nil {
		return
	}
	return *v, true
}

// OldPlaylistID returns the old "playlist_id" field's value of the PlaylistSong entity.
// If the PlaylistSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistSongMutation) OldPlaylistID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlaylistID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlaylistID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlaylistID: %w", err)
	}
	return oldValue.PlaylistID, nil
}

// ResetPlaylistID resets all changes to the "playlist_id" field.
func (m *PlaylistSongMutation) ResetPlaylistID() {
	m.playlist = nil
}

// SetSongID sets the "song_id" field.
func (m *PlaylistSongMutation) SetSongID(u uuid.UUID) {
	m.song = &u
}

// SongID returns the value of the "song_id" field in the mutation.
func (m *PlaylistSongMutation) SongID() (r uuid.UUID, exists bool) {
	v := m.song
	if v == nil {
		return
	}
	return *v, true
}

// OldSongID returns the old "song_id" field's value of the PlaylistSong entity.
// If the PlaylistSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistSongMutation) OldSongID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSongID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSongID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSongID: %w", err)
	}
	return oldValue.SongID, nil
}

// ResetSongID resets all changes to the "song_id" field.
func (m *PlaylistSongMutation) ResetSongID() {
	m.song = nil
}

// SetDateAdded sets the "date_added" field.
func (m *PlaylistSongMutation) SetDateAdded(t time.Time) {
	m.date_added = &t
}

// DateAdded returns the value of the "date_added" field in the mutation.
func (m *PlaylistSongMutation) DateAdded() (r time.Time, exists bool) {
	v := m.date_added
	if v == nil {
		return
	}
	return *v, true
}

// OldDateAdded returns the old "date_added" field's value of the PlaylistSong entity.
// If the PlaylistSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistSongMutation) OldDateAdded(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateAdded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateAdded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateAdded: %w", err)
	}
	return oldValue.DateAdded, nil
}

// ResetDateAdded resets all changes to the "date_added" field.
func (m *PlaylistSongMutation) ResetDateAdded() {
	m.date_added = nil
}

// ClearPlaylist clears the "playlist" edge to the Playlist entity.
func (m *PlaylistSongMutation) ClearPlaylist() {
	m.clearedplaylist = true
}

// PlaylistCleared reports if the "playlist" edge to the Playlist entity was cleared.
func (m *PlaylistSongMutation) PlaylistCleared() bool {
	return m.clearedplaylist
}

// PlaylistIDs returns the "playlist" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlaylistID instead. It exists only for internal usage by the builders.
func (m *PlaylistSongMutation) PlaylistIDs() (ids []uuid.UUID) {
	if id := m.playlist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlaylist resets all changes to the "playlist" edge.
func (m *PlaylistSongMutation) ResetPlaylist() {
	m.playlist = nil
	m.clearedplaylist = false
}

// ClearSong clears the "song" edge to the Song entity.
func (m *PlaylistSongMutation) ClearSong() {
	m.clearedsong = true
}

// SongCleared reports if the "song" edge to the Song entity was cleared.
func (m *PlaylistSongMutation) SongCleared() bool {
	return m.clearedsong
}

// SongIDs returns the "song" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SongID instead. It exists only for internal usage by the builders.
func (m *PlaylistSongMutation) SongIDs() (ids []uuid.UUID) {
	if id := m.song; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSong resets all changes to the "song" edge.
func (m *PlaylistSongMutation) ResetSong() {
	m.song = nil
	m.clearedsong = false
}

// Where appends a list predicates to the PlaylistSongMutation builder.
func (m *PlaylistSongMutation) Where(ps ...predicate.PlaylistSong) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlaylistSongMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlaylistSong).
func (m *PlaylistSongMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlaylistSongMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.playlist != nil {
		fields = append(fields, playlistsong.FieldPlaylistID)
	}
	if m.song != nil {
		fields = append(fields, playlistsong.FieldSongID)
	}
	if m.date_added != nil {
		fields = append(fields, playlistsong.FieldDateAdded)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlaylistSongMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlistsong.FieldPlaylistID:
		return m.PlaylistID()
	case playlistsong.FieldSongID:
		return m.SongID()
	case playlistsong.FieldDateAdded:
		return m.DateAdded()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlaylistSongMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlistsong.FieldPlaylistID:
		return m.OldPlaylistID(ctx)
	case playlistsong.FieldSongID:
		return m.OldSongID(ctx)
	case playlistsong.FieldDateAdded:
		return m.OldDateAdded(ctx)
	}
	return nil, fmt.Errorf("unknown PlaylistSong field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistSongMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlistsong.FieldPlaylistID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlaylistID(v)
		return nil
	case playlistsong.FieldSongID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSongID(v)
		return nil
	case playlistsong.FieldDateAdded:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateAdded(v)
		return nil
	}
	return fmt.Errorf("unknown PlaylistSong field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlaylistSongMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlaylistSongMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistSongMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PlaylistSong numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlaylistSongMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlaylistSongMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistSongMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlaylistSong nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlaylistSongMutation) ResetField(name string) error {
	switch name {
	case playlistsong.FieldPlaylistID:
		m.ResetPlaylistID()
		return nil
	case playlistsong.FieldSongID:
		m.ResetSongID()
		return nil
	case playlistsong.FieldDateAdded:
		m.ResetDateAdded()
		return nil
	}
	return fmt.Errorf("unknown PlaylistSong field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlaylistSongMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.playlist != nil {
		edges = append(edges, playlistsong.EdgePlaylist)
	}
	if m.song != nil {
		edges = append(edges, playlistsong.EdgeSong)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlaylistSongMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playlistsong.EdgePlaylist:
		if id := m.playlist; id != nil {
			return []ent.Value{*id}
		}
	case playlistsong.EdgeSong:
		if id := m.song; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlaylistSongMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlaylistSongMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlaylistSongMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedplaylist {
		edges = append(edges, playlistsong.EdgePlaylist)
	}
	if m.clearedsong {
		edges = append(edges, playlistsong.EdgeSong)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlaylistSongMutation) EdgeCleared(name string) bool {
	switch name {
	case playlistsong.EdgePlaylist:
		return m.clearedplaylist
	case playlistsong.EdgeSong:
		return m.clearedsong
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlaylistSongMutation) ClearEdge(name string) error {
	switch name {
	case playlistsong.EdgePlaylist:
		m.ClearPlaylist()
		return nil
	case playlistsong.EdgeSong:
		m.ClearSong()
		return nil
	}
	return fmt.Errorf("unknown PlaylistSong unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlaylistSongMutation) ResetEdge(name string) error {
	switch name {
	case playlistsong.EdgePlaylist:
		m.ResetPlaylist()
		return nil
	case playlistsong.EdgeSong:
		m.ResetSong()
		return nil
	}
	return fmt.Errorf("unknown PlaylistSong edge %s", name)
}

// SongMutation represents an operation that mutates the Song nodes in the graph.
type SongMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *time.Time
	updated_at       *time.Time
	title            *string
	url              *string
	plays            *uint32
	addplays         *int32
	duration         *uint32
	addduration      *int32
	clearedFields    map[string]struct{}
	user             *uuid.UUID
	cleareduser      bool
	liked_by         map[int]struct{}
	removedliked_by  map[int]struct{}
	clearedliked_by  bool
	playlists        map[int]struct{}
	removedplaylists map[int]struct{}
	clearedplaylists bool
	done             bool
	oldValue         func(context.Context) (*Song, error)
	predicates       []predicate.Song
}

var _ ent.Mutation = (*SongMutation)(nil)

// songOption allows management of the mutation configuration using functional options.
type songOption func(*SongMutation)

// newSongMutation creates new mutation for the Song entity.
func newSongMutation(c config, op Op, opts ...songOption) *SongMutation {
	m := &SongMutation{
		config:        c,
		op:            op,
		typ:           TypeSong,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSongID sets the ID field of the mutation.
func withSongID(id uuid.UUID) songOption {
	return func(m *SongMutation) {
		var (
			err   error
			once  sync.Once
			value *Song
		)
		m.oldValue = func(ctx context.Context) (*Song, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Song.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSong sets the old Song of the mutation.
func withSong(node *Song) songOption {
	return func(m *SongMutation) {
		m.oldValue = func(context.Context) (*Song, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SongMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SongMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Song entities.
func (m *SongMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SongMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SongMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Song.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SongMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SongMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SongMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SongMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SongMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SongMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetArtistID sets the "artist_id" field.
func (m *SongMutation) SetArtistID(u uuid.UUID) {
	m.user = &u
}

// ArtistID returns the value of the "artist_id" field in the mutation.
func (m *SongMutation) ArtistID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldArtistID returns the old "artist_id" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldArtistID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArtistID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArtistID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArtistID: %w", err)
	}
	return oldValue.ArtistID, nil
}

// ResetArtistID resets all changes to the "artist_id" field.
func (m *SongMutation) ResetArtistID() {
	m.user = nil
}

// SetTitle sets the "title" field.
func (m *SongMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SongMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SongMutation) ResetTitle() {
	m.title = nil
}

// SetURL sets the "url" field.
func (m *SongMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SongMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SongMutation) ResetURL() {
	m.url = nil
}

// SetPlays sets the "plays" field.
func (m *SongMutation) SetPlays(u uint32) {
	m.plays = &u
	m.addplays = nil
}

// Plays returns the value of the "plays" field in the mutation.
func (m *SongMutation) Plays() (r uint32, exists bool) {
	v := m.plays
	if v == nil {
		return
	}
	return *v, true
}

// OldPlays returns the old "plays" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldPlays(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlays: %w", err)
	}
	return oldValue.Plays, nil
}

// AddPlays adds u to the "plays" field.
func (m *SongMutation) AddPlays(u int32) {
	if m.addplays != nil {
		*m.addplays += u
	} else {
		m.addplays = &u
	}
}

// AddedPlays returns the value that was added to the "plays" field in this mutation.
func (m *SongMutation) AddedPlays() (r int32, exists bool) {
	v := m.addplays
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlays resets all changes to the "plays" field.
func (m *SongMutation) ResetPlays() {
	m.plays = nil
	m.addplays = nil
}

// SetDuration sets the "duration" field.
func (m *SongMutation) SetDuration(u uint32) {
	m.duration = &u
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *SongMutation) Duration() (r uint32, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldDuration(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds u to the "duration" field.
func (m *SongMutation) AddDuration(u int32) {
	if m.addduration != nil {
		*m.addduration += u
	} else {
		m.addduration = &u
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *SongMutation) AddedDuration() (r int32, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *SongMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SongMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SongMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SongMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SongMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SongMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SongMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddLikedByIDs adds the "liked_by" edge to the Like entity by ids.
func (m *SongMutation) AddLikedByIDs(ids ...int) {
	if m.liked_by == nil {
		m.liked_by = make(map[int]struct{})
	}
	for i := range ids {
		m.liked_by[ids[i]] = struct{}{}
	}
}

// ClearLikedBy clears the "liked_by" edge to the Like entity.
func (m *SongMutation) ClearLikedBy() {
	m.clearedliked_by = true
}

// LikedByCleared reports if the "liked_by" edge to the Like entity was cleared.
func (m *SongMutation) LikedByCleared() bool {
	return m.clearedliked_by
}

// RemoveLikedByIDs removes the "liked_by" edge to the Like entity by IDs.
func (m *SongMutation) RemoveLikedByIDs(ids ...int) {
	if m.removedliked_by == nil {
		m.removedliked_by = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked_by, ids[i])
		m.removedliked_by[ids[i]] = struct{}{}
	}
}

// RemovedLikedBy returns the removed IDs of the "liked_by" edge to the Like entity.
func (m *SongMutation) RemovedLikedByIDs() (ids []int) {
	for id := range m.removedliked_by {
		ids = append(ids, id)
	}
	return
}

// LikedByIDs returns the "liked_by" edge IDs in the mutation.
func (m *SongMutation) LikedByIDs() (ids []int) {
	for id := range m.liked_by {
		ids = append(ids, id)
	}
	return
}

// ResetLikedBy resets all changes to the "liked_by" edge.
func (m *SongMutation) ResetLikedBy() {
	m.liked_by = nil
	m.clearedliked_by = false
	m.removedliked_by = nil
}

// AddPlaylistIDs adds the "playlists" edge to the PlaylistSong entity by ids.
func (m *SongMutation) AddPlaylistIDs(ids ...int) {
	if m.playlists == nil {
		m.playlists = make(map[int]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the PlaylistSong entity.
func (m *SongMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the PlaylistSong entity was cleared.
func (m *SongMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the PlaylistSong entity by IDs.
func (m *SongMutation) RemovePlaylistIDs(ids ...int) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the PlaylistSong entity.
func (m *SongMutation) RemovedPlaylistsIDs() (ids []int) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *SongMutation) PlaylistsIDs() (ids []int) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *SongMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// Where appends a list predicates to the SongMutation builder.
func (m *SongMutation) Where(ps ...predicate.Song) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SongMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Song).
func (m *SongMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SongMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, song.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, song.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, song.FieldArtistID)
	}
	if m.title != nil {
		fields = append(fields, song.FieldTitle)
	}
	if m.url != nil {
		fields = append(fields, song.FieldURL)
	}
	if m.plays != nil {
		fields = append(fields, song.FieldPlays)
	}
	if m.duration != nil {
		fields = append(fields, song.FieldDuration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SongMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case song.FieldCreatedAt:
		return m.CreatedAt()
	case song.FieldUpdatedAt:
		return m.UpdatedAt()
	case song.FieldArtistID:
		return m.ArtistID()
	case song.FieldTitle:
		return m.Title()
	case song.FieldURL:
		return m.URL()
	case song.FieldPlays:
		return m.Plays()
	case song.FieldDuration:
		return m.Duration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SongMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case song.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case song.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case song.FieldArtistID:
		return m.OldArtistID(ctx)
	case song.FieldTitle:
		return m.OldTitle(ctx)
	case song.FieldURL:
		return m.OldURL(ctx)
	case song.FieldPlays:
		return m.OldPlays(ctx)
	case song.FieldDuration:
		return m.OldDuration(ctx)
	}
	return nil, fmt.Errorf("unknown Song field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SongMutation) SetField(name string, value ent.Value) error {
	switch name {
	case song.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case song.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case song.FieldArtistID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArtistID(v)
		return nil
	case song.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case song.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case song.FieldPlays:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlays(v)
		return nil
	case song.FieldDuration:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Song field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SongMutation) AddedFields() []string {
	var fields []string
	if m.addplays != nil {
		fields = append(fields, song.FieldPlays)
	}
	if m.addduration != nil {
		fields = append(fields, song.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SongMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case song.FieldPlays:
		return m.AddedPlays()
	case song.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SongMutation) AddField(name string, value ent.Value) error {
	switch name {
	case song.FieldPlays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlays(v)
		return nil
	case song.FieldDuration:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Song numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SongMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SongMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SongMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Song nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SongMutation) ResetField(name string) error {
	switch name {
	case song.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case song.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case song.FieldArtistID:
		m.ResetArtistID()
		return nil
	case song.FieldTitle:
		m.ResetTitle()
		return nil
	case song.FieldURL:
		m.ResetURL()
		return nil
	case song.FieldPlays:
		m.ResetPlays()
		return nil
	case song.FieldDuration:
		m.ResetDuration()
		return nil
	}
	return fmt.Errorf("unknown Song field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SongMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, song.EdgeUser)
	}
	if m.liked_by != nil {
		edges = append(edges, song.EdgeLikedBy)
	}
	if m.playlists != nil {
		edges = append(edges, song.EdgePlaylists)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SongMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case song.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case song.EdgeLikedBy:
		ids := make([]ent.Value, 0, len(m.liked_by))
		for id := range m.liked_by {
			ids = append(ids, id)
		}
		return ids
	case song.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SongMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedliked_by != nil {
		edges = append(edges, song.EdgeLikedBy)
	}
	if m.removedplaylists != nil {
		edges = append(edges, song.EdgePlaylists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SongMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case song.EdgeLikedBy:
		ids := make([]ent.Value, 0, len(m.removedliked_by))
		for id := range m.removedliked_by {
			ids = append(ids, id)
		}
		return ids
	case song.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SongMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, song.EdgeUser)
	}
	if m.clearedliked_by {
		edges = append(edges, song.EdgeLikedBy)
	}
	if m.clearedplaylists {
		edges = append(edges, song.EdgePlaylists)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SongMutation) EdgeCleared(name string) bool {
	switch name {
	case song.EdgeUser:
		return m.cleareduser
	case song.EdgeLikedBy:
		return m.clearedliked_by
	case song.EdgePlaylists:
		return m.clearedplaylists
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SongMutation) ClearEdge(name string) error {
	switch name {
	case song.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Song unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SongMutation) ResetEdge(name string) error {
	switch name {
	case song.EdgeUser:
		m.ResetUser()
		return nil
	case song.EdgeLikedBy:
		m.ResetLikedBy()
		return nil
	case song.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	}
	return fmt.Errorf("unknown Song edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *time.Time
	updated_at       *time.Time
	username         *string
	email            *string
	password         *string
	image            *string
	role             *horizon.Role
	clearedFields    map[string]struct{}
	songs            map[uuid.UUID]struct{}
	removedsongs     map[uuid.UUID]struct{}
	clearedsongs     bool
	playlists        map[uuid.UUID]struct{}
	removedplaylists map[uuid.UUID]struct{}
	clearedplaylists bool
	likes            map[int]struct{}
	removedlikes     map[int]struct{}
	clearedlikes     bool
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetImage sets the "image" field.
func (m *UserMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *UserMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *UserMutation) ResetImage() {
	m.image = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(h horizon.Role) {
	m.role = &h
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r horizon.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v horizon.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// AddSongIDs adds the "songs" edge to the Song entity by ids.
func (m *UserMutation) AddSongIDs(ids ...uuid.UUID) {
	if m.songs == nil {
		m.songs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.songs[ids[i]] = struct{}{}
	}
}

// ClearSongs clears the "songs" edge to the Song entity.
func (m *UserMutation) ClearSongs() {
	m.clearedsongs = true
}

// SongsCleared reports if the "songs" edge to the Song entity was cleared.
func (m *UserMutation) SongsCleared() bool {
	return m.clearedsongs
}

// RemoveSongIDs removes the "songs" edge to the Song entity by IDs.
func (m *UserMutation) RemoveSongIDs(ids ...uuid.UUID) {
	if m.removedsongs == nil {
		m.removedsongs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.songs, ids[i])
		m.removedsongs[ids[i]] = struct{}{}
	}
}

// RemovedSongs returns the removed IDs of the "songs" edge to the Song entity.
func (m *UserMutation) RemovedSongsIDs() (ids []uuid.UUID) {
	for id := range m.removedsongs {
		ids = append(ids, id)
	}
	return
}

// SongsIDs returns the "songs" edge IDs in the mutation.
func (m *UserMutation) SongsIDs() (ids []uuid.UUID) {
	for id := range m.songs {
		ids = append(ids, id)
	}
	return
}

// ResetSongs resets all changes to the "songs" edge.
func (m *UserMutation) ResetSongs() {
	m.songs = nil
	m.clearedsongs = false
	m.removedsongs = nil
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by ids.
func (m *UserMutation) AddPlaylistIDs(ids ...uuid.UUID) {
	if m.playlists == nil {
		m.playlists = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the Playlist entity.
func (m *UserMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the Playlist entity was cleared.
func (m *UserMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the Playlist entity by IDs.
func (m *UserMutation) RemovePlaylistIDs(ids ...uuid.UUID) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the Playlist entity.
func (m *UserMutation) RemovedPlaylistsIDs() (ids []uuid.UUID) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *UserMutation) PlaylistsIDs() (ids []uuid.UUID) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *UserMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// AddLikeIDs adds the "likes" edge to the Like entity by ids.
func (m *UserMutation) AddLikeIDs(ids ...int) {
	if m.likes == nil {
		m.likes = make(map[int]struct{})
	}
	for i := range ids {
		m.likes[ids[i]] = struct{}{}
	}
}

// ClearLikes clears the "likes" edge to the Like entity.
func (m *UserMutation) ClearLikes() {
	m.clearedlikes = true
}

// LikesCleared reports if the "likes" edge to the Like entity was cleared.
func (m *UserMutation) LikesCleared() bool {
	return m.clearedlikes
}

// RemoveLikeIDs removes the "likes" edge to the Like entity by IDs.
func (m *UserMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlikes == nil {
		m.removedlikes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likes, ids[i])
		m.removedlikes[ids[i]] = struct{}{}
	}
}

// RemovedLikes returns the removed IDs of the "likes" edge to the Like entity.
func (m *UserMutation) RemovedLikesIDs() (ids []int) {
	for id := range m.removedlikes {
		ids = append(ids, id)
	}
	return
}

// LikesIDs returns the "likes" edge IDs in the mutation.
func (m *UserMutation) LikesIDs() (ids []int) {
	for id := range m.likes {
		ids = append(ids, id)
	}
	return
}

// ResetLikes resets all changes to the "likes" edge.
func (m *UserMutation) ResetLikes() {
	m.likes = nil
	m.clearedlikes = false
	m.removedlikes = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.image != nil {
		fields = append(fields, user.FieldImage)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldImage:
		return m.Image()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldImage:
		return m.OldImage(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case user.FieldRole:
		v, ok := value.(horizon.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldImage:
		m.ResetImage()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.songs != nil {
		edges = append(edges, user.EdgeSongs)
	}
	if m.playlists != nil {
		edges = append(edges, user.EdgePlaylists)
	}
	if m.likes != nil {
		edges = append(edges, user.EdgeLikes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSongs:
		ids := make([]ent.Value, 0, len(m.songs))
		for id := range m.songs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.likes))
		for id := range m.likes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsongs != nil {
		edges = append(edges, user.EdgeSongs)
	}
	if m.removedplaylists != nil {
		edges = append(edges, user.EdgePlaylists)
	}
	if m.removedlikes != nil {
		edges = append(edges, user.EdgeLikes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSongs:
		ids := make([]ent.Value, 0, len(m.removedsongs))
		for id := range m.removedsongs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.removedlikes))
		for id := range m.removedlikes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsongs {
		edges = append(edges, user.EdgeSongs)
	}
	if m.clearedplaylists {
		edges = append(edges, user.EdgePlaylists)
	}
	if m.clearedlikes {
		edges = append(edges, user.EdgeLikes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSongs:
		return m.clearedsongs
	case user.EdgePlaylists:
		return m.clearedplaylists
	case user.EdgeLikes:
		return m.clearedlikes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSongs:
		m.ResetSongs()
		return nil
	case user.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	case user.EdgeLikes:
		m.ResetLikes()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
