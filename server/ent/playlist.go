// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sentrionic/horizon/ent/playlist"
	"github.com/sentrionic/horizon/ent/user"
)

// Playlist is the model entity for the Playlist schema.
type Playlist struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistQuery when eager-loading is set.
	Edges PlaylistEdges `json:"edges"`
}

// PlaylistEdges holds the relations/edges for other nodes in the graph.
type PlaylistEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Songs holds the value of the songs edge.
	Songs []*PlaylistSong `json:"songs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SongsOrErr returns the Songs value or an error if the edge
// was not loaded in eager-loading.
func (e PlaylistEdges) SongsOrErr() ([]*PlaylistSong, error) {
	if e.loadedTypes[1] {
		return e.Songs, nil
	}
	return nil, &NotLoadedError{edge: "songs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Playlist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case playlist.FieldName, playlist.FieldDescription:
			values[i] = new(sql.NullString)
		case playlist.FieldCreatedAt, playlist.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case playlist.FieldID, playlist.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Playlist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Playlist fields.
func (pl *Playlist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playlist.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case playlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case playlist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case playlist.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pl.UserID = *value
			}
		case playlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case playlist.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pl.Description = new(string)
				*pl.Description = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Playlist entity.
func (pl *Playlist) QueryUser() *UserQuery {
	return (&PlaylistClient{config: pl.config}).QueryUser(pl)
}

// QuerySongs queries the "songs" edge of the Playlist entity.
func (pl *Playlist) QuerySongs() *PlaylistSongQuery {
	return (&PlaylistClient{config: pl.config}).QuerySongs(pl)
}

// Update returns a builder for updating this Playlist.
// Note that you need to call Playlist.Unwrap() before calling this method if this Playlist
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Playlist) Update() *PlaylistUpdateOne {
	return (&PlaylistClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Playlist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Playlist) Unwrap() *Playlist {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Playlist is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Playlist) String() string {
	var builder strings.Builder
	builder.WriteString("Playlist(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.UserID))
	builder.WriteString(", name=")
	builder.WriteString(pl.Name)
	if v := pl.Description; v != nil {
		builder.WriteString(", description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Playlists is a parsable slice of Playlist.
type Playlists []*Playlist

func (pl Playlists) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
