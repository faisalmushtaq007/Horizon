// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sentrionic/horizon/ent/like"
	"github.com/sentrionic/horizon/ent/playlistsong"
	"github.com/sentrionic/horizon/ent/song"
	"github.com/sentrionic/horizon/ent/user"
)

// SongCreate is the builder for creating a Song entity.
type SongCreate struct {
	config
	mutation *SongMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SongCreate) SetCreatedAt(t time.Time) *SongCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SongCreate) SetNillableCreatedAt(t *time.Time) *SongCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SongCreate) SetUpdatedAt(t time.Time) *SongCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SongCreate) SetNillableUpdatedAt(t *time.Time) *SongCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetArtistID sets the "artist_id" field.
func (sc *SongCreate) SetArtistID(u uuid.UUID) *SongCreate {
	sc.mutation.SetArtistID(u)
	return sc
}

// SetTitle sets the "title" field.
func (sc *SongCreate) SetTitle(s string) *SongCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetURL sets the "url" field.
func (sc *SongCreate) SetURL(s string) *SongCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetPlays sets the "plays" field.
func (sc *SongCreate) SetPlays(u uint32) *SongCreate {
	sc.mutation.SetPlays(u)
	return sc
}

// SetNillablePlays sets the "plays" field if the given value is not nil.
func (sc *SongCreate) SetNillablePlays(u *uint32) *SongCreate {
	if u != nil {
		sc.SetPlays(*u)
	}
	return sc
}

// SetDuration sets the "duration" field.
func (sc *SongCreate) SetDuration(u uint32) *SongCreate {
	sc.mutation.SetDuration(u)
	return sc
}

// SetID sets the "id" field.
func (sc *SongCreate) SetID(u uuid.UUID) *SongCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SongCreate) SetNillableID(u *uuid.UUID) *SongCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sc *SongCreate) SetUserID(id uuid.UUID) *SongCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SongCreate) SetUser(u *User) *SongCreate {
	return sc.SetUserID(u.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the Like entity by IDs.
func (sc *SongCreate) AddLikedByIDs(ids ...int) *SongCreate {
	sc.mutation.AddLikedByIDs(ids...)
	return sc
}

// AddLikedBy adds the "liked_by" edges to the Like entity.
func (sc *SongCreate) AddLikedBy(l ...*Like) *SongCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return sc.AddLikedByIDs(ids...)
}

// AddPlaylistIDs adds the "playlists" edge to the PlaylistSong entity by IDs.
func (sc *SongCreate) AddPlaylistIDs(ids ...int) *SongCreate {
	sc.mutation.AddPlaylistIDs(ids...)
	return sc
}

// AddPlaylists adds the "playlists" edges to the PlaylistSong entity.
func (sc *SongCreate) AddPlaylists(p ...*PlaylistSong) *SongCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPlaylistIDs(ids...)
}

// Mutation returns the SongMutation object of the builder.
func (sc *SongCreate) Mutation() *SongMutation {
	return sc.mutation
}

// Save creates the Song in the database.
func (sc *SongCreate) Save(ctx context.Context) (*Song, error) {
	var (
		err  error
		node *Song
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SongMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SongCreate) SaveX(ctx context.Context) *Song {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SongCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SongCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SongCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := song.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := song.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Plays(); !ok {
		v := song.DefaultPlays
		sc.mutation.SetPlays(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := song.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SongCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Song.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Song.updated_at"`)}
	}
	if _, ok := sc.mutation.ArtistID(); !ok {
		return &ValidationError{Name: "artist_id", err: errors.New(`ent: missing required field "Song.artist_id"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Song.title"`)}
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := song.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Song.title": %w`, err)}
		}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Song.url"`)}
	}
	if v, ok := sc.mutation.URL(); ok {
		if err := song.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Song.url": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Plays(); !ok {
		return &ValidationError{Name: "plays", err: errors.New(`ent: missing required field "Song.plays"`)}
	}
	if _, ok := sc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Song.duration"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Song.user"`)}
	}
	return nil
}

func (sc *SongCreate) sqlSave(ctx context.Context) (*Song, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *SongCreate) createSpec() (*Song, *sqlgraph.CreateSpec) {
	var (
		_node = &Song{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: song.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: song.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: song.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: song.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := sc.mutation.Plays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldPlays,
		})
		_node.Plays = value
	}
	if value, ok := sc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: song.FieldDuration,
		})
		_node.Duration = value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   song.UserTable,
			Columns: []string{song.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtistID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.LikedByTable,
			Columns: []string{song.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: like.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   song.PlaylistsTable,
			Columns: []string{song.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playlistsong.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SongCreateBulk is the builder for creating many Song entities in bulk.
type SongCreateBulk struct {
	config
	builders []*SongCreate
}

// Save creates the Song entities in the database.
func (scb *SongCreateBulk) Save(ctx context.Context) ([]*Song, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Song, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SongMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SongCreateBulk) SaveX(ctx context.Context) []*Song {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SongCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SongCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
