// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: playlist_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistClient is the client API for Playlist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistClient interface {
	GetPlaylists(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*PlaylistListResponse, error)
	AddSong(ctx context.Context, in *PlaylistSongRequest, opts ...grpc.CallOption) (*SongResponse, error)
	RemoveSong(ctx context.Context, in *PlaylistSongRequest, opts ...grpc.CallOption) (*SongResponse, error)
	CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
	UpdatePlaylist(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
	DeletePlaylist(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
	GetPlaylistSongs(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistSongList, error)
}

type playlistClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistClient(cc grpc.ClientConnInterface) PlaylistClient {
	return &playlistClient{cc}
}

func (c *playlistClient) GetPlaylists(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*PlaylistListResponse, error) {
	out := new(PlaylistListResponse)
	err := c.cc.Invoke(ctx, "/pb.Playlist/GetPlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) AddSong(ctx context.Context, in *PlaylistSongRequest, opts ...grpc.CallOption) (*SongResponse, error) {
	out := new(SongResponse)
	err := c.cc.Invoke(ctx, "/pb.Playlist/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) RemoveSong(ctx context.Context, in *PlaylistSongRequest, opts ...grpc.CallOption) (*SongResponse, error) {
	out := new(SongResponse)
	err := c.cc.Invoke(ctx, "/pb.Playlist/RemoveSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/pb.Playlist/CreatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) UpdatePlaylist(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/pb.Playlist/UpdatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) DeletePlaylist(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/pb.Playlist/DeletePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) GetPlaylistSongs(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistSongList, error) {
	out := new(PlaylistSongList)
	err := c.cc.Invoke(ctx, "/pb.Playlist/GetPlaylistSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServer is the server API for Playlist service.
// All implementations must embed UnimplementedPlaylistServer
// for forward compatibility
type PlaylistServer interface {
	GetPlaylists(context.Context, *GetPlaylistRequest) (*PlaylistListResponse, error)
	AddSong(context.Context, *PlaylistSongRequest) (*SongResponse, error)
	RemoveSong(context.Context, *PlaylistSongRequest) (*SongResponse, error)
	CreatePlaylist(context.Context, *CreatePlaylistRequest) (*PlaylistResponse, error)
	UpdatePlaylist(context.Context, *UpdatePlaylistRequest) (*PlaylistResponse, error)
	DeletePlaylist(context.Context, *PlaylistRequest) (*PlaylistResponse, error)
	GetPlaylistSongs(context.Context, *PlaylistRequest) (*PlaylistSongList, error)
	mustEmbedUnimplementedPlaylistServer()
}

// UnimplementedPlaylistServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServer struct {
}

func (UnimplementedPlaylistServer) GetPlaylists(context.Context, *GetPlaylistRequest) (*PlaylistListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylists not implemented")
}
func (UnimplementedPlaylistServer) AddSong(context.Context, *PlaylistSongRequest) (*SongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlaylistServer) RemoveSong(context.Context, *PlaylistSongRequest) (*SongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSong not implemented")
}
func (UnimplementedPlaylistServer) CreatePlaylist(context.Context, *CreatePlaylistRequest) (*PlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedPlaylistServer) UpdatePlaylist(context.Context, *UpdatePlaylistRequest) (*PlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylist not implemented")
}
func (UnimplementedPlaylistServer) DeletePlaylist(context.Context, *PlaylistRequest) (*PlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaylist not implemented")
}
func (UnimplementedPlaylistServer) GetPlaylistSongs(context.Context, *PlaylistRequest) (*PlaylistSongList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylistSongs not implemented")
}
func (UnimplementedPlaylistServer) mustEmbedUnimplementedPlaylistServer() {}

// UnsafePlaylistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServer will
// result in compilation errors.
type UnsafePlaylistServer interface {
	mustEmbedUnimplementedPlaylistServer()
}

func RegisterPlaylistServer(s grpc.ServiceRegistrar, srv PlaylistServer) {
	s.RegisterService(&Playlist_ServiceDesc, srv)
}

func _Playlist_GetPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).GetPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Playlist/GetPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).GetPlaylists(ctx, req.(*GetPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Playlist/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).AddSong(ctx, req.(*PlaylistSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_RemoveSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).RemoveSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Playlist/RemoveSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).RemoveSong(ctx, req.(*PlaylistSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Playlist/CreatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).CreatePlaylist(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_UpdatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).UpdatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Playlist/UpdatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).UpdatePlaylist(ctx, req.(*UpdatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_DeletePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).DeletePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Playlist/DeletePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).DeletePlaylist(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_GetPlaylistSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).GetPlaylistSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Playlist/GetPlaylistSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).GetPlaylistSongs(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Playlist_ServiceDesc is the grpc.ServiceDesc for Playlist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Playlist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Playlist",
	HandlerType: (*PlaylistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlaylists",
			Handler:    _Playlist_GetPlaylists_Handler,
		},
		{
			MethodName: "AddSong",
			Handler:    _Playlist_AddSong_Handler,
		},
		{
			MethodName: "RemoveSong",
			Handler:    _Playlist_RemoveSong_Handler,
		},
		{
			MethodName: "CreatePlaylist",
			Handler:    _Playlist_CreatePlaylist_Handler,
		},
		{
			MethodName: "UpdatePlaylist",
			Handler:    _Playlist_UpdatePlaylist_Handler,
		},
		{
			MethodName: "DeletePlaylist",
			Handler:    _Playlist_DeletePlaylist_Handler,
		},
		{
			MethodName: "GetPlaylistSongs",
			Handler:    _Playlist_GetPlaylistSongs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist_service.proto",
}
