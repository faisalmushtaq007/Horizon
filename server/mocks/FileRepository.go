// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

// DeleteSong provides a mock function with given fields: key
func (_m *FileRepository) DeleteSong(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadSong provides a mock function with given fields: songData, directory, filename
func (_m *FileRepository) UploadSong(songData bytes.Buffer, directory string, filename string) (string, error) {
	ret := _m.Called(songData, directory, filename)

	var r0 string
	if rf, ok := ret.Get(0).(func(bytes.Buffer, string, string) string); ok {
		r0 = rf(songData, directory, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bytes.Buffer, string, string) error); ok {
		r1 = rf(songData, directory, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileRepository creates a new instance of FileRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileRepository(t testing.TB) *FileRepository {
	mock := &FileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
